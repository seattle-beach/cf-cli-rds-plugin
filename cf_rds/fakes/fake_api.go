// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/rds"
	"github.com/seattle-beach/cf-cli-rds-plugin/api"
	"github.com/seattle-beach/cf-cli-rds-plugin/cf_rds"
)

type FakeApi struct {
	GetSubnetGroupsStub        func() ([]*rds.DBSubnetGroup, error)
	getSubnetGroupsMutex       sync.RWMutex
	getSubnetGroupsArgsForCall []struct{}
	getSubnetGroupsReturns     struct {
		result1 []*rds.DBSubnetGroup
		result2 error
	}
	getSubnetGroupsReturnsOnCall map[int]struct {
		result1 []*rds.DBSubnetGroup
		result2 error
	}
	CreateInstanceStub        func(instance *api.DBInstance) (chan error, error)
	createInstanceMutex       sync.RWMutex
	createInstanceArgsForCall []struct {
		instance *api.DBInstance
	}
	createInstanceReturns struct {
		result1 chan error
		result2 error
	}
	createInstanceReturnsOnCall map[int]struct {
		result1 chan error
		result2 error
	}
	RefreshInstanceStub        func(instance *api.DBInstance) chan error
	refreshInstanceMutex       sync.RWMutex
	refreshInstanceArgsForCall []struct {
		instance *api.DBInstance
	}
	refreshInstanceReturns struct {
		result1 chan error
	}
	refreshInstanceReturnsOnCall map[int]struct {
		result1 chan error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApi) GetSubnetGroups() ([]*rds.DBSubnetGroup, error) {
	fake.getSubnetGroupsMutex.Lock()
	ret, specificReturn := fake.getSubnetGroupsReturnsOnCall[len(fake.getSubnetGroupsArgsForCall)]
	fake.getSubnetGroupsArgsForCall = append(fake.getSubnetGroupsArgsForCall, struct{}{})
	fake.recordInvocation("GetSubnetGroups", []interface{}{})
	fake.getSubnetGroupsMutex.Unlock()
	if fake.GetSubnetGroupsStub != nil {
		return fake.GetSubnetGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSubnetGroupsReturns.result1, fake.getSubnetGroupsReturns.result2
}

func (fake *FakeApi) GetSubnetGroupsCallCount() int {
	fake.getSubnetGroupsMutex.RLock()
	defer fake.getSubnetGroupsMutex.RUnlock()
	return len(fake.getSubnetGroupsArgsForCall)
}

func (fake *FakeApi) GetSubnetGroupsReturns(result1 []*rds.DBSubnetGroup, result2 error) {
	fake.GetSubnetGroupsStub = nil
	fake.getSubnetGroupsReturns = struct {
		result1 []*rds.DBSubnetGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeApi) GetSubnetGroupsReturnsOnCall(i int, result1 []*rds.DBSubnetGroup, result2 error) {
	fake.GetSubnetGroupsStub = nil
	if fake.getSubnetGroupsReturnsOnCall == nil {
		fake.getSubnetGroupsReturnsOnCall = make(map[int]struct {
			result1 []*rds.DBSubnetGroup
			result2 error
		})
	}
	fake.getSubnetGroupsReturnsOnCall[i] = struct {
		result1 []*rds.DBSubnetGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeApi) CreateInstance(instance *api.DBInstance) (chan error, error) {
	fake.createInstanceMutex.Lock()
	ret, specificReturn := fake.createInstanceReturnsOnCall[len(fake.createInstanceArgsForCall)]
	fake.createInstanceArgsForCall = append(fake.createInstanceArgsForCall, struct {
		instance *api.DBInstance
	}{instance})
	fake.recordInvocation("CreateInstance", []interface{}{instance})
	fake.createInstanceMutex.Unlock()
	if fake.CreateInstanceStub != nil {
		return fake.CreateInstanceStub(instance)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createInstanceReturns.result1, fake.createInstanceReturns.result2
}

func (fake *FakeApi) CreateInstanceCallCount() int {
	fake.createInstanceMutex.RLock()
	defer fake.createInstanceMutex.RUnlock()
	return len(fake.createInstanceArgsForCall)
}

func (fake *FakeApi) CreateInstanceArgsForCall(i int) *api.DBInstance {
	fake.createInstanceMutex.RLock()
	defer fake.createInstanceMutex.RUnlock()
	return fake.createInstanceArgsForCall[i].instance
}

func (fake *FakeApi) CreateInstanceReturns(result1 chan error, result2 error) {
	fake.CreateInstanceStub = nil
	fake.createInstanceReturns = struct {
		result1 chan error
		result2 error
	}{result1, result2}
}

func (fake *FakeApi) CreateInstanceReturnsOnCall(i int, result1 chan error, result2 error) {
	fake.CreateInstanceStub = nil
	if fake.createInstanceReturnsOnCall == nil {
		fake.createInstanceReturnsOnCall = make(map[int]struct {
			result1 chan error
			result2 error
		})
	}
	fake.createInstanceReturnsOnCall[i] = struct {
		result1 chan error
		result2 error
	}{result1, result2}
}

func (fake *FakeApi) RefreshInstance(instance *api.DBInstance) chan error {
	fake.refreshInstanceMutex.Lock()
	ret, specificReturn := fake.refreshInstanceReturnsOnCall[len(fake.refreshInstanceArgsForCall)]
	fake.refreshInstanceArgsForCall = append(fake.refreshInstanceArgsForCall, struct {
		instance *api.DBInstance
	}{instance})
	fake.recordInvocation("RefreshInstance", []interface{}{instance})
	fake.refreshInstanceMutex.Unlock()
	if fake.RefreshInstanceStub != nil {
		return fake.RefreshInstanceStub(instance)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.refreshInstanceReturns.result1
}

func (fake *FakeApi) RefreshInstanceCallCount() int {
	fake.refreshInstanceMutex.RLock()
	defer fake.refreshInstanceMutex.RUnlock()
	return len(fake.refreshInstanceArgsForCall)
}

func (fake *FakeApi) RefreshInstanceArgsForCall(i int) *api.DBInstance {
	fake.refreshInstanceMutex.RLock()
	defer fake.refreshInstanceMutex.RUnlock()
	return fake.refreshInstanceArgsForCall[i].instance
}

func (fake *FakeApi) RefreshInstanceReturns(result1 chan error) {
	fake.RefreshInstanceStub = nil
	fake.refreshInstanceReturns = struct {
		result1 chan error
	}{result1}
}

func (fake *FakeApi) RefreshInstanceReturnsOnCall(i int, result1 chan error) {
	fake.RefreshInstanceStub = nil
	if fake.refreshInstanceReturnsOnCall == nil {
		fake.refreshInstanceReturnsOnCall = make(map[int]struct {
			result1 chan error
		})
	}
	fake.refreshInstanceReturnsOnCall[i] = struct {
		result1 chan error
	}{result1}
}

func (fake *FakeApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSubnetGroupsMutex.RLock()
	defer fake.getSubnetGroupsMutex.RUnlock()
	fake.createInstanceMutex.RLock()
	defer fake.createInstanceMutex.RUnlock()
	fake.refreshInstanceMutex.RLock()
	defer fake.refreshInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf_rds.Api = new(FakeApi)
